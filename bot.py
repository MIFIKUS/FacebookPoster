import telebot
from telebot import types
import json
import os
import threading
import traceback
import tempfile
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from FB.Groups.find import find_all_groups
from FB.Groups.research import research_group
# from FB.Login.login import make_login
from FB.Groups.post import make_post
from DeepSeek.ds import change_text

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("8400282082:AAEFh5oZXxZNgyiw-jE2ZpAzVJ1vZ_UfR1g")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CONFIG_FILE = "bot_config.json"
PROMPT_FILE = "DeepSeek/promt.txt"
PREVIEW_FILE = "preview_posts.txt"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            cfg = json.load(f)
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ cookies_file, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if "cookies_file" not in cfg:
                cfg["cookies_file"] = ""
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ login, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if "login" in cfg:
                cfg.pop("login", None)
            return cfg
    return {
        "cookies_file": "",
        "keywords": [],
        "post_text": "",
        "prompt": ""
    }
def _auth_with_cookies(driver, cookies_file_path):
    driver.get("https://www.facebook.com/")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
    with open(cookies_file_path, "r", encoding="utf-8") as f:
        cookies = json.load(f)
    # –î–æ–±–∞–≤–ª—è–µ–º cookies
    for cookie in cookies:
        cookie_dict = {
            "name": cookie.get("name"),
            "value": cookie.get("value"),
            "domain": cookie.get("domain", ".facebook.com"),
            "path": cookie.get("path", "/"),
        }
        if "expiry" in cookie:
            cookie_dict["expiry"] = cookie.get("expiry")
        try:
            driver.add_cookie(cookie_dict)
        except Exception:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ cookies
            pass
    # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
    driver.get("https://www.facebook.com/")
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
def load_prompt():
    if os.path.exists(PROMPT_FILE):
        with open(PROMPT_FILE, "r", encoding="utf-8") as f:
            return f.read()
    return ""

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
def save_prompt(prompt_text):
    with open(PROMPT_FILE, "w", encoding="utf-8") as f:
        f.write(prompt_text)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤
def save_preview_posts(posts_data):
    with open(PREVIEW_FILE, "w", encoding="utf-8") as f:
        for group_name, post_text in posts_data.items():
            f.write(f"{group_name}\n{post_text}\n\n")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤
def load_preview_posts():
    if not os.path.exists(PREVIEW_FILE):
        return {}

    posts_data = {}
    with open(PREVIEW_FILE, "r", encoding="utf-8") as f:
        content = f.read().strip()
        if content:
            groups = content.split("\n\n")
            for group in groups:
                if group.strip():
                    lines = group.strip().split("\n", 1)
                    if len(lines) == 2:
                        posts_data[lines[0]] = lines[1]
    return posts_data

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(commands=["start"])
def start_message(message):
    config = load_config()
    markup = types.InlineKeyboardMarkup()

    markup.add(types.InlineKeyboardButton("üìù –ó–∞–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="set_prompt"))
    markup.add(types.InlineKeyboardButton("üç™ –ó–∞–≥—Ä—É–∑–∏—Ç—å cookies", callback_data="set_cookies"))
    markup.add(types.InlineKeyboardButton("üîç –ó–∞–¥–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="set_keywords"))
    markup.add(types.InlineKeyboardButton("üìÑ –ó–∞–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="set_post"))
    markup.add(types.InlineKeyboardButton("üîç –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤", callback_data="create_preview"))
    markup.add(types.InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="run_script"))

    bot.send_message(
        message.chat.id,
        f"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Facebook Poster Bot!\n\n"
        f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ Cookies: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã' if config.get('cookies_file') else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}\n"
        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {len(config['keywords'])} —à—Ç.\n"
        f"‚Ä¢ –ü–æ—Å—Ç: {'‚úÖ –ó–∞–¥–∞–Ω' if config['post_text'] else '‚ùå –ù–µ –∑–∞–¥–∞–Ω'}\n"
        f"‚Ä¢ –ü—Ä–æ–º–ø—Ç: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config['prompt'] else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n"
        f"üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "set_prompt")
def set_prompt_callback(call):
    bot.answer_callback_query(call.id)
    user_states[call.from_user.id] = "waiting_prompt"

    current_prompt = load_prompt()
    bot.send_message(
        call.message.chat.id,
        f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek.\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
        f"‚Ä¢ {{text}} - —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ {{group_name}} - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
        f"‚Ä¢ {{group_desc}} - –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
        f"‚Ä¢ {{posts}} - —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≥—Ä—É–ø–ø—ã\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n{current_prompt}",
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data == "set_cookies")
def set_cookies_callback(call):
    bot.answer_callback_query(call.id)
    user_states[call.from_user.id] = "waiting_cookies_file"
    bot.send_message(
        call.message.chat.id,
        "üç™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª cookies –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ cookie —Å –ø–æ–ª—è–º–∏ name, value, domain, path, expiry (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).\n"
        "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–æ–º–µ–Ω: .facebook.com\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

@bot.callback_query_handler(func=lambda call: call.data == "set_keywords")
def set_keywords_callback(call):
    bot.answer_callback_query(call.id)
    user_states[call.from_user.id] = "waiting_keywords"
    config = load_config()
    current_keywords = ", ".join(config["keywords"]) if config["keywords"] else "–ù–µ—Ç"
    bot.send_message(
        call.message.chat.id,
        f"üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–¢–µ–∫—É—â–∏–µ: {current_keywords}"
    )

@bot.callback_query_handler(func=lambda call: call.data == "set_post")
def set_post_callback(call):
    bot.answer_callback_query(call.id)
    user_states[call.from_user.id] = "waiting_post"
    config = load_config()
    current_post = config["post_text"] if config["post_text"] else "–ù–µ—Ç"
    bot.send_message(
        call.message.chat.id,
        f"üìÑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ {{text}} –≤ –ø—Ä–æ–º–ø—Ç–µ):\n\n–¢–µ–∫—É—â–∏–π: {current_post}"
    )

@bot.callback_query_handler(func=lambda call: call.data == "create_preview")
def create_preview_callback(call):
    bot.answer_callback_query(call.id)
    config = load_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω—ã
    if not config.get("cookies_file") or not os.path.exists(config["cookies_file"]):
        bot.send_message(call.message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª cookies!")
        return

    if not config["keywords"]:
        bot.send_message(call.message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞!")
        return

    if not config["post_text"]:
        bot.send_message(call.message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞!")
        return

    if not load_prompt():
        bot.send_message(call.message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –ø—Ä–æ–º–ø—Ç!")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=create_posts_preview, args=(call.message.chat.id, config))
    thread.daemon = True
    thread.start()

    bot.send_message(call.message.chat.id, "üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤... –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")

@bot.callback_query_handler(func=lambda call: call.data == "run_script")
def run_script_callback(call):
    bot.answer_callback_query(call.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤
    preview_posts = load_preview_posts()
    if not preview_posts:
        bot.send_message(call.message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤!")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="confirm_posts"))
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="edit_posts"))

    bot.send_message(
        call.message.chat.id,
        f"üìã –ù–∞–π–¥–µ–Ω–æ {len(preview_posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "confirm_posts")
def confirm_posts_callback(call):
    bot.answer_callback_query(call.id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=run_facebook_script, args=(call.message.chat.id,))
    thread.daemon = True
    thread.start()

    bot.send_message(call.message.chat.id, "üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")

@bot.callback_query_handler(func=lambda call: call.data == "edit_posts")
def edit_posts_callback(call):
    bot.answer_callback_query(call.id)
    user_states[call.from_user.id] = "waiting_edited_posts"

    bot.send_message(
        call.message.chat.id,
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏.\n\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
        "–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n"
        "—Ç–µ–∫—Å—Ç_–ø–æ—Å—Ç–∞\n\n"
        "–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã2\n"
        "—Ç–µ–∫—Å—Ç_–ø–æ—Å—Ç–∞2\n\n"
        "–ò —Ç–∞–∫ –¥–∞–ª–µ–µ..."
    )

def create_posts_preview(chat_id, config):
    driver = None
    temp_profile_dir = None
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--window-size=1920,1080")
        #chrome_options.add_argument("--no-sandbox")
        #chrome_options.add_argument("--disable-dev-shm-usage")
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ user-data-dir
        temp_profile_dir = tempfile.mkdtemp(prefix="fbposter_chrome_")
        chrome_options.add_argument(f"--user-data-dir={temp_profile_dir}")

        driver = webdriver.Chrome(options=chrome_options)

        # –õ–æ–≥–∏–Ω –ø–æ cookies
        bot.send_message(chat_id, "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies...")
        _auth_with_cookies(driver, config["cookies_file"])
        bot.send_message(chat_id, "‚úÖ Cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        all_groups = {}
        for keyword in config["keywords"]:
            bot.send_message(chat_id, f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
            groups = find_all_groups(driver, keyword)

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for name, link in groups.items():
                if name not in all_groups:
                    all_groups[name] = link

        bot.send_message(chat_id, f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤
        preview_posts = {}
        success_count = 0
        error_count = 0

        for name, link in all_groups.items():
            try:
                bot.send_message(chat_id, f"üìã –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {name}")
                group_info = research_group(driver, link)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ—Å—Ç–∞–º–∏
                posts_str = ""
                for post_link, post_info in group_info["posts"].items():
                    post_text = post_info.get("text", "")
                    comments = post_info.get("comments", [])
                    posts_str += f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {'; '.join(comments)}\n"

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é DeepSeek
                bot.send_message(chat_id, f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: {name}")
                generated_post = change_text(
                    config["post_text"],
                    name,
                    posts_str,
                    group_info.get("desc", "")
                )

                preview_posts[link] = generated_post
                success_count += 1

                bot.send_message(chat_id, f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã: {name}")

            except Exception as e:
                error_count += 1
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {name}: {str(e)}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤
        save_preview_posts(preview_posts)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–µ–≤—å—é
        if preview_posts:
            with open(PREVIEW_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption=f"üìÑ –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤ ({len(preview_posts)} —à—Ç.)")

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        bot.send_message(
            chat_id,
            f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã."
        )

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}")

    finally:
        if driver:
            driver.quit()
        if temp_profile_dir and os.path.isdir(temp_profile_dir):
            shutil.rmtree(temp_profile_dir, ignore_errors=True)

def run_facebook_script(chat_id):
    driver = None
    temp_profile_dir = None
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤
        preview_posts = load_preview_posts()
        if not preview_posts:
            bot.send_message(chat_id, "‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--window-size=1920,1080")
        #chrome_options.add_argument("--no-sandbox")
        #chrome_options.add_argument("--disable-dev-shm-usage")
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ user-data-dir
        temp_profile_dir = tempfile.mkdtemp(prefix="fbposter_chrome_")
        chrome_options.add_argument(f"--user-data-dir={temp_profile_dir}")

        driver = webdriver.Chrome(options=chrome_options)

        # –õ–æ–≥–∏–Ω –ø–æ cookies
        bot.send_message(chat_id, "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies...")
        config = load_config()
        _auth_with_cookies(driver, config["cookies_file"])
        bot.send_message(chat_id, "‚úÖ Cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
        success_count = 0
        error_count = 0

        for group_link, post_text in preview_posts.items():
            try:
                bot.send_message(chat_id, f"üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: {group_link}")
                make_post(driver, post_text, group_link)
                success_count += 1
                bot.send_message(chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ: {group_link}")

            except Exception as e:
                traceback.print_exc()
                error_count += 1
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {group_link}: {str(e)}")


        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        bot.send_message(
            chat_id,
            f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
        )

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        if driver:
            driver.quit()
        if temp_profile_dir and os.path.isdir(temp_profile_dir):
            shutil.rmtree(temp_profile_dir, ignore_errors=True)

@bot.message_handler(content_types=["document"])
def handle_document(message):
    user_id = message.from_user.id

    if user_id not in user_states:
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        state = user_states[user_id]

        if state == "waiting_edited_posts":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = "temp_edited_posts.txt"
            with open(temp_file, "wb") as f:
                f.write(downloaded_file)

            # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            with open(temp_file, "r", encoding="utf-8") as f:
                content = f.read().strip()

            if not content:
                bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π!")
                return

            # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã
            posts_data = {}
            groups = content.split("\n\n")
            for group in groups:
                if group.strip():
                    lines = group.strip().split("\n", 1)
                    if len(lines) == 2:
                        posts_data[lines[0]] = lines[1]

            if not posts_data:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            save_preview_posts(posts_data)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_file)

            del user_states[user_id]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="confirm_posts"))
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="edit_posts"))

            bot.send_message(
                message.chat.id,
                f"‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ({len(posts_data)} —à—Ç.)\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
            )

        elif state == "waiting_cookies_file":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –≤ —Ñ–∞–π–ª
            cookies_path = "cookies.json"
            with open(cookies_path, "wb") as f:
                f.write(downloaded_file)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ JSON
            try:
                with open(cookies_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                if not isinstance(data, list):
                    raise ValueError("–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ cookie")
            except Exception as e:
                os.remove(cookies_path)
                bot.send_message(message.chat.id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª cookies: {str(e)}")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥
            cfg = load_config()
            cfg["cookies_file"] = cookies_path
            save_config(cfg)

            del user_states[user_id]

            bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            return

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id

    if user_id not in user_states:
        return

    state = user_states[user_id]
    config = load_config()

    if state == "waiting_prompt":
        save_prompt(message.text)
        config["prompt"] = message.text
        save_config(config)
        del user_states[user_id]
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    # –£–¥–∞–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è

    elif state == "waiting_keywords":
        keywords = [k.strip() for k in message.text.split(",") if k.strip()]
        config["keywords"] = keywords
        save_config(config)
        del user_states[user_id]
        bot.send_message(message.chat.id, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤!")

    elif state == "waiting_post":
        config["post_text"] = message.text
        save_config(config)
        del user_states[user_id]
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ cookies
